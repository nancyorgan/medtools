process.api.data = function(datalist){
remove.header = datalist[-1]
remove.NULL = lapply(remove.header, function(x) do.call(c,lapply(x, function(y) {y[is.null(y)] <- NA;y})))
df = ldply(remove.NULL)
names(df) = ldply(datalist[1])
df
}
token = "d2a5fa6361536255294468c21a3fbb3d5bad59cc"
mycounties = process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2000/sf3?key=",
token,"&get=P001001&for=county:*&in=state:47", sep = ""))))$county
per.county.tn = matrix(paste(paste("http://api.census.gov/data/2000/sf3?key=", token,
"&get=P001001&for=block+group:*&in=state:47+county:", sep = ""), mycounties, sep = ""),ncol = 1)
tn.blocks = apply(per.county.tn, 1, function(x) process.api.data(fromJSON(file=url(x))))
tn.blocks.merged = data.frame(rbindlist(tn.blocks))
tn.blocks.merged$county = ifelse(nchar(tn.blocks.merged$county) == 1, paste("00",tn.blocks.merged$county, sep = ""),
ifelse(nchar(tn.blocks.merged$county) == 2, paste("0", tn.blocks.merged$county, sep = ""),
tn.blocks.merged$county))
tn.blocks.merged$tract = ifelse(nchar(tn.blocks.merged$tract) == 3, paste("000",tn.blocks.merged$tract, sep = ""),
ifelse(nchar(tn.blocks.merged$tract) == 4, paste("00", tn.blocks.merged$tract, sep = ""),
ifelse(nchar(tn.blocks.merged$tract) == 5, paste("0", tn.blocks.merged$tract, sep = ""),
tn.blocks.merged$tract)))
tn.blocks.merged = data.frame(tn.blocks.merged, GEOID = apply(data.frame(tn.blocks.merged)[,c("state", "county", "tract", "block.group")],
1, paste, collapse = ""))
tn.blocks.merged = subset(tn.blocks.merged, select = -c(state, county, tract, block.group))
tn.blocks.merged = cbind(tn.blocks.merged, num = row.names(tn.blocks.merged))
head(tn.blocks.merged)
ggplot(data = block.df, aes(x = long, y = lat, group = group)) +
geom_polygon()
length(unique(tn.blocks.merged$GEOID))
length(unique(block.df$GEOID))
table(nchar(tn.blocks.merged$GEOID))
table(nchar(as.character(tn.blocks.merged$GEOID)))
table(nchar(as.character(block.df$GEOID)))
choropleth = join(tn.blocks.merged, block.df, by = "GEOID")
head(choropleth)
length(unique(choropleth$GEOID))
choropleth = join(tn.blocks.merged, block.df)
length(unique(choropleth$GEOID))
?join
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "full")
length(unique(choropleth$GEOID))
choropleth[,1] = as.numeric(choropleth[,1])
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
length(unique(choropleth$GEOID))
unique(tn.blocks.merged$GEOID)
length(blocks.df$GEOID)
length(unique(block.df$GEOID))
125-14
View(choropleth)
length(unique(choropleth$num))
head(choropleth$GEOID)
head(block.df)
head(tn.merged.df)
head(tn.blocks.merged)
head(sort(tn.blocks.merged))
head(sort(tn.blocks.merged$GEOID))
head(sort(block.df$GEOID))
length(unique(c(tn.blocks.merged$GEOID, block.df$GEOID)))
head(choropleth)
choropleth = merge(tn.blocks.merged, block.df, by = "GEOID")
choropleth[,1] = as.numeric(choropleth[,1])
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
choropleth[,1] = as.numeric(choropleth[,1])
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
class(choropleth[,1])
head(choropleth)
table(choropleth$GEOID)
?merge
choropleth = merge(tn.blocks.merged, block.df, by.y = "GEOID")
choropleth[,1] = as.numeric(choropleth[,1])
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
head(pop.block)
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "full")
choropleth[,1] = as.numeric(choropleth[,1])
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
length(unique(choropleth$GEOID))
length(unique(as.character(choropleth$GEOID)))
table$choropleth$GEOID
table(choropleth$GEOID)
sum(as.vector(table(choropleth$GEOID)) == 1)
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "left")
choropleth[,1] = as.numeric(choropleth[,1])
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "right")
choropleth[,1] = as.numeric(choropleth[,1])
choropleth[,2] = as.numeric(choropleth[,2])
choropleth$num = as.numeric(choropleth$num)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
dim(tn.blocks.merged)
head(tn.blocks.merged)
hist(tn.blocks.merged[,1])
hist(as.numeric(tn.blocks.merged[,1]))
tn.blocks.merged$P001001[tn.blocks.merged$P001001 == 0] = 8000
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "right")
choropleth[,1] = as.numeric(choropleth[,1])
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
pop.block
head(choropleth)
head(block.df)
head(tn.merged.df)
head(tn.blocks.merged)
rm(choropleth)
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "right")
choropleth[,1] = as.numeric(choropleth[,1])
choropleth[,2] = as.numeric(choropleth[,2])
choropleth$num = as.numeric(choropleth$num)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
tn.blocks.merged$P001001[tn.blocks.merged$P001001 == 0] = 8000
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "right")
choropleth[,1] = as.numeric(choropleth[,1])
choropleth[,2] = as.numeric(choropleth[,2])
choropleth$num = as.numeric(choropleth$num)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
choropleth[choropleth$P0010001 == "",]
choropleth[choropleth$P0010001 == " ",]
choropleth[is.na(choropleth$P001001),]
class(tn.blocks.merged$GEOID)
class(block.df$GEOID)
head(chropleth$GEOID)
head(choropleth$GEOID)
rm(choropleth)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "right")
head(choropleth)
choropleth$P001001 = as.numeric(choropleth$P001001)
head(choropleth)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
tn.blocks.merged[tn.blocks.merged$P001001 == "0",]
tn.blocks.merged[tn.blocks.merged$P001001 == """,]
tn.blocks.merged[is.na(tn.blocks.merged$P001001),]
table(tn.blocks.merged$P001001)
(tn.blocks.merged$P001001)
hist(tn.blocks.merged$P001001)
hist(as.numeric(as.character(tn.blocks.merged$P001001))
choropleth$P001001 = as.numeric(as.character(choropleth$P001001))
hist(as.numeric(as.character(tn.blocks.merged$P001001)))
tn.blocks.merged[tn.blocks.merged$P001001 == "0",]
tn.blocks.merged
View(tn.blocks.merged)
tn.blocks.merged[tn.blocks.merged$P001001 == 0,]
tn.blocks.merged[tn.blocks.merged$P001001 == "0",]
tn.blocks.merged[is.na(tn.blocks.merged$P001001),]
tn.blocks.merged[tn.blocks.merged$P001001 == " ",]
class(tn.blocks.merged$P001001)
tn.blocks.merged[as.numeric(as.character(tn.blocks.merged$P001001)) == " ",]
tn.blocks.merged[as.numeric(as.character(tn.blocks.merged$P001001)) == "",]
tn.blocks.merged[is.na(as.numeric(as.character(tn.blocks.merged$P001001))),]
davidson = block.df[grep("^47037", block.df$GEOID),]
testing = data.frame(GEOID = sort(unique(block.df$GEOID)), index = c(1:length(unique(block.df$GEOID))))
choropleth = join(testing, davidson, by = "GEOID", type = "left")
ggplot(data = choro, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = price)) +
scale_fill_gradient(low = "darkseagreen", high = "black", name = "This is a test") +
ggtitle("This is still a test.")
ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = price)) +
scale_fill_gradient(low = "darkseagreen", high = "black", name = "This is a test") +
ggtitle("This is still a test.")
head(choropleth)
dim(testing)
head(testing)
choropleth = join(testing, block.df, by = "GEOID", type = "right")
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = index )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
tn.blocks.merged$GEOID = as.numeric(as.character(tn.blocks.merged$GEOID))
block.df$GEOID = as.numeric(as.character(block.df$GEOID))
choropleth = join(testing, block.df, by = "GEOID", type = "right")
choropleth$P001001 = as.numeric(as.character(choropleth$P001001))
dim(choropleth)
length(unique(choropleth$GEOID))
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = index )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
pop.block
head(choropleth)
class(choropleth$GEOID)
block = readOGR(dsn = "/Users/organnl/Desktop/mapfolders/census block shapefiles",
layer = "cb_2013_47_bg_500k")
block@data$id = rownames(block@data)
block.points = fortify(block, region = "id")
block.df = join(block.points, block@data, by = "id")
block.df = subset(block.df, select = c(long, lat, group, GEOID))
process.api.data = function(datalist){
remove.header = datalist[-1]
remove.NULL = lapply(remove.header, function(x) do.call(c,lapply(x, function(y) {y[is.null(y)] <- NA;y})))
df = ldply(remove.NULL)
names(df) = ldply(datalist[1])
df
}
token = "d2a5fa6361536255294468c21a3fbb3d5bad59cc"
#token = "nancy"
#mycounties = process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2010/acs5?key=",
#                                                      token,"&get=B25077_001E&for=county:*&in=state:47", sep = ""))))$county
# get a list of counties
mycounties = process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2000/sf3?key=",
token,"&get=P001001&for=county:*&in=state:47", sep = ""))))$county
# this is a list of URLs
per.county.tn = matrix(paste(paste("http://api.census.gov/data/2000/sf3?key=", token,
"&get=P001001&for=block+group:*&in=state:47+county:", sep = ""), mycounties, sep = ""),ncol = 1)
tn.blocks = apply(per.county.tn, 1, function(x) process.api.data(fromJSON(file=url(x))))
tn.blocks.merged = data.frame(rbindlist(tn.blocks))
tn.blocks.merged$county = ifelse(nchar(tn.blocks.merged$county) == 1, paste("00",tn.blocks.merged$county, sep = ""),
ifelse(nchar(tn.blocks.merged$county) == 2, paste("0", tn.blocks.merged$county, sep = ""),
tn.blocks.merged$county))
tn.blocks.merged$tract = ifelse(nchar(tn.blocks.merged$tract) == 3, paste("000",tn.blocks.merged$tract, sep = ""),
ifelse(nchar(tn.blocks.merged$tract) == 4, paste("00", tn.blocks.merged$tract, sep = ""),
ifelse(nchar(tn.blocks.merged$tract) == 5, paste("0", tn.blocks.merged$tract, sep = ""),
tn.blocks.merged$tract)))
tn.blocks.merged = data.frame(tn.blocks.merged, GEOID = apply(data.frame(tn.blocks.merged)[,c("state", "county", "tract", "block.group")],
1, paste, collapse = ""))
tn.blocks.merged = subset(tn.blocks.merged, select = -c(state, county, tract, block.group))
tn.blocks.merged = subset(tn.blocks.merged, select = -c(state, county, tract, block.group))
head(tn.blocks.merged)
tn.blocks.merged = cbind(tn.blocks.merged, num = row.names(tn.blocks.merged))
head(tn.blocks.merged)
class(tn.blocks.merged$GEOID)
block.df$GEOID = as.character(block.df$GEOID)
tn.blocks.merged$GEOID = as.character(tn.blocks.merged$GEOID)
choropleth = join(testing, block.df, by = "GEOID", type = "right")
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "right")
choropleth$P001001 = as.numeric(as.character(choropleth$P001001))
choropleth$num = as.numeric(choropleth$num)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = index )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
View(choropleth)
choropleth[is.na(choropleth$P001001),]
nancy = choropleth[is.na(choropleth$P001001),]
dim(nancy)
length(unique(nancy$GEOID))
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "full")
nancy = choropleth[is.na(choropleth$P001001),]
dim(nancy)
length(unique(nancy$GEOID))
choropleth$P001001 = as.numeric(as.character(choropleth$P001001))
choropleth$num = as.numeric(choropleth$num)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
head(data.table(tn.blocks.merged))
tn.blocks.merged = data.table(tn.blocks.merged)
class(block.df)
class(tn.blocks.merged)
block.df = data.table(block.df)
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "full")
choropleth$P001001 = as.numeric(as.character(choropleth$P001001))
choropleth$num = as.numeric(choropleth$num)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
block = readOGR(dsn = "/Users/organnl/Desktop/mapfolders/census block shapefiles",
layer = "cb_2013_47_bg_500k")
block@data$id = rownames(block@data)
block.points = fortify(block, region = "id")
block.df = join(block.points, block@data, by = "id")
block.df = subset(block.df, select = c(long, lat, group, GEOID))
class(block.df)
?apply
apply(block.df, 2, function(x){class(x)})
process.api.data = function(datalist){
remove.header = datalist[-1]
remove.NULL = lapply(remove.header, function(x) do.call(c,lapply(x, function(y) {y[is.null(y)] <- NA;y})))
df = ldply(remove.NULL)
names(df) = ldply(datalist[1])
df
}
token = "d2a5fa6361536255294468c21a3fbb3d5bad59cc"
#token = "nancy"
#mycounties = process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2010/acs5?key=",
#                                                      token,"&get=B25077_001E&for=county:*&in=state:47", sep = ""))))$county
# get a list of counties
mycounties = process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2000/sf3?key=",
token,"&get=P001001&for=county:*&in=state:47", sep = ""))))$county
# this is a list of URLs
per.county.tn = matrix(paste(paste("http://api.census.gov/data/2000/sf3?key=", token,
"&get=P001001&for=block+group:*&in=state:47+county:", sep = ""), mycounties, sep = ""),ncol = 1)
tn.blocks = apply(per.county.tn, 1, function(x) process.api.data(fromJSON(file=url(x))))
tn.blocks.merged = data.frame(rbindlist(tn.blocks))
tn.blocks.merged$county = ifelse(nchar(tn.blocks.merged$county) == 1, paste("00",tn.blocks.merged$county, sep = ""),
ifelse(nchar(tn.blocks.merged$county) == 2, paste("0", tn.blocks.merged$county, sep = ""),
tn.blocks.merged$county))
tn.blocks.merged$tract = ifelse(nchar(tn.blocks.merged$tract) == 3, paste("000",tn.blocks.merged$tract, sep = ""),
ifelse(nchar(tn.blocks.merged$tract) == 4, paste("00", tn.blocks.merged$tract, sep = ""),
ifelse(nchar(tn.blocks.merged$tract) == 5, paste("0", tn.blocks.merged$tract, sep = ""),
tn.blocks.merged$tract)))
tn.blocks.merged = data.frame(tn.blocks.merged, GEOID = apply(data.frame(tn.blocks.merged)[,c("state", "county", "tract", "block.group")],
1, paste, collapse = ""))
tn.blocks.merged = subset(tn.blocks.merged, select = -c(state, county, tract, block.group))
tn.blocks.merged = cbind(tn.blocks.merged, num = row.names(tn.blocks.merged))
head(tn.blocks.merged)
apply(tn.blocks.merged, 2, function(x){class(x)})
?join
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "full")
apply(choropleth, 2, function(x){clas(x)})
apply(choropleth, 2, function(x){class(x)})
choropleth$P001001 = as.numeric(choropleth$P001001)
apply(choropleth, 2, function(x){class(x)})
choropleth$P001001 = as.numeric(choropleth$P001001)
class(choropleth$P001001)
apply(choropleth, 2, function(x){class(x)})
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
class(choropleth$P001001)
class(choropleth$GEOID)
apply(choropleth, 2, function(x) class(x))
head(choropleth)
process.api.data = function(datalist){
remove.header = datalist[-1]
remove.NULL = lapply(remove.header, function(x) do.call(c,lapply(x, function(y) {y[is.null(y)] <- NA;y})))
df = ldply(remove.NULL)
names(df) = ldply(datalist[1])
df
}
token = "d2a5fa6361536255294468c21a3fbb3d5bad59cc"
#token = "nancy"
#mycounties = process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2010/acs5?key=",
#                                                      token,"&get=B25077_001E&for=county:*&in=state:47", sep = ""))))$county
# get a list of counties
mycounties = process.api.data(fromJSON(file=url(paste("http://api.census.gov/data/2000/sf3?key=",
token,"&get=P001001&for=county:*&in=state:47", sep = ""))))$county
# this is a list of URLs
per.county.tn = matrix(paste(paste("http://api.census.gov/data/2000/sf3?key=", token,
"&get=P001001&for=block+group:*&in=state:47+county:", sep = ""), mycounties, sep = ""),ncol = 1)
tn.blocks = apply(per.county.tn, 1, function(x) process.api.data(fromJSON(file=url(x))))
tn.blocks.merged = data.frame(rbindlist(tn.blocks))
tn.blocks.merged$county = ifelse(nchar(tn.blocks.merged$county) == 1, paste("00",tn.blocks.merged$county, sep = ""),
ifelse(nchar(tn.blocks.merged$county) == 2, paste("0", tn.blocks.merged$county, sep = ""),
tn.blocks.merged$county))
tn.blocks.merged$tract = ifelse(nchar(tn.blocks.merged$tract) == 3, paste("000",tn.blocks.merged$tract, sep = ""),
ifelse(nchar(tn.blocks.merged$tract) == 4, paste("00", tn.blocks.merged$tract, sep = ""),
ifelse(nchar(tn.blocks.merged$tract) == 5, paste("0", tn.blocks.merged$tract, sep = ""),
tn.blocks.merged$tract)))
View(tn.blocks.merged)
tn.blocks.merged[is.na(tn.blocks.merged),]
tn.blocks.merged[is.na(tn.blocks.merged$P001001),]
tn.blocks.merged[tn.blocks.merged$P001001 == 0,]
class(tn.blocks.merged$P001001)
tn.blocks.merged[tn.blocks.merged$P001001 == "",]
tn.blocks.merged[tn.blocks.merged$P001001 == " ",]
tn.blocks.merged[tn.blocks.merged$P001001 == NA ,]
hist(tn.blocks.merged$P001001)
table(tn.blocks.merged$P001001)
as.vector(table(tn.blocks.merged$P001001))
sum(as.vector(table(tn.blocks.merged$P001001)))
dim(tn.blocks.merged)
as.vector(table(tn.blocks.merged$P001001))
dim(tn.blocks.merged)
table(tn.blocks.merged$P001001)
tn.blocks.merged = data.frame(tn.blocks.merged, GEOID = apply(data.frame(tn.blocks.merged)[,c("state", "county", "tract", "block.group")],
1, paste, collapse = ""))
tn.blocks.merged = subset(tn.blocks.merged, select = -c(state, county, tract, block.group))
tn.blocks.merged = cbind(tn.blocks.merged, num = row.names(tn.blocks.merged))
head(tn.blocks.merged)
tn.blocks.merged = data.table(tn.blocks.merged)
table(tn.blocks.merged$num)
as.vector(table(tn.blocks.merged$num))
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "full")
block = readOGR(dsn = "/Users/organnl/Desktop/mapfolders/census block shapefiles",
layer = "cb_2013_47_bg_500k")
block@data$id = rownames(block@data)
block.points = fortify(block, region = "id")
block.df = join(block.points, block@data, by = "id")
block.df = subset(block.df, select = c(long, lat, group, GEOID))
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "full")
choropleth$P001001 = as.numeric(choropleth$P001001)
choropleth$num = as.numeric(choropleth$num)
head(choropleth)
length(unique(P001001))
length(unique(choropleth$P001001))
length(unique(tn.merged.blocks$P001001))
length(unique(tn.blocks.merged$P001001))
View(choropleth)
choropleth = merge(tn.blocks.merged, block.df, by = "GEOID")
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
choropleth$P001001 = as.numeric(choropleth$P001001)
choropleth$num = as.numeric(choropleth$num)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
choropleth = merge(tn.blocks.merged, block.df, by = "GEOID", all.x = TRUE, all.y = TRUE)
?merge
housing.davidson.block = read.csv("/Users/organnl/Desktop/housing.block.davidson/DEC_00_SF3_DP4_with_ann.csv")
housing.davidson.block = read.csv("/Users/organnl/Desktop/mapfolders/housing.block.davidson/DEC_00_SF3_DP4_with_ann.csv")
housing.davidson.block = housing.davidson.block[-1,]
housing.davidson.block = subset(housing.davidson.block, select = c(GEO.id2, HC01_VC74))
housing.davidson.block$HC01_VC74 = as.numeric(as.character(housing.davidson.block$HC01_VC74))
tn.blocks.merged = data.table(tn.blocks.merged)
block.df = data.table(block.df)
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "full")
choropleth$P001001 = as.numeric(choropleth$P001001)
choropleth$num = as.numeric(choropleth$num)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
View(choropleth)
choropleth$num[is.na(choropleth$group)]
length(unique(choropleth$num[is.na(choropleth$group)]))
choropleth = merge(block.df, tn.blocks.merged, by.x = "GEOID", by.y = "GEOID", all = TRUE)
choropleth = merge(block.df, tn.blocks.merged, by = "GEOID", all = TRUE)
choropleth = choropleth[order(choropleth$order),]
choropleth$P001001 = as.numeric(choropleth$P001001)
head(choropleth)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = num)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
choropleth = join(tn.blocks.merged, block.df, by = "GEOID", type = "full")
choropleth$P001001 = as.numeric(choropleth$P001001)
pop.block = ggplot(data = choropleth, aes(x = long, y = lat, group = num)) +
geom_polygon(aes(fill = P001001 )) +
scale_fill_gradient(low = "darkseagreen1", high = "black", name = "Population") +
ggtitle("Populations Per Block")
pop.block
pop.block
pop.block
library("devtools")
devtools::install_github("nancyorgan/medtools")
library("medtools")
?mapcalc
?mapcalc
library("medtools")
?mapcalc
89/.21
getwd()
setwd("/Users/organnl/Desktop/medtools")
document()
library("roxygen2")
library("devtools")
document()
rm.package("medtools")
?medtools
devtools::instal_github("nancyorgan/medtools")
devtools::install_github("nancyorgan/medtools")
library("medtools")
?cvsofa
