contact = cbind(id = c(1:length(contact$street)), contact)
contact$zip = substring(contact$zip, 1, 5)
contact = contact[contact$street != "",]
contact
contact = subset(contact, street != "")
contact
library(RCurl)
library(Hmisc)
curl_handle = getCurlHandle()
curlSetOpt(ssl.verifypeer = FALSE, curl = curl_handle)
y.contact<- postForm('https://redcap.vanderbilt.edu/api/',
#token = '3B777CF402960B14D884A3FC03B852A3',
token = 'DA5D9AC9DDE451C6CB6D35C9FA155346',
content = 'record',
format = 'csv',
type = 'flat',
forms = "contact_information",
fields = "id",
curl = curl_handle,
exportDataAccessGroups = TRUE)
contact.data <- read.csv(file = textConnection(y.contact), header = TRUE, sep = ",", na.strings = "",
stringsAsFactors = FALSE)
contact.data$pt_state.factor = factor(contact.data$pt_state,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"))
levels(contact.data$pt_state.factor)=c("AL","AK","AS","AZ","AR","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LS","MA","ME","MD","MI","MN","MO","MS","MT","NE","NH","NV","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY")
#source("/Users/organnl/Desktop/MINDUSA/mindusa_phase1_redcap.r")
names(contact.data)
these = c("id", "redcap_event_name", "redcap_data_access_group", "sex", "pt_street", "pt_city", "pt_state", "pt_zip")
contact = cbind(subset(contact.data, select = these), contact.data$pt_state.factor)
#contact = subset(contact, redcap_event_name == "enrollment_trial_d_arm_1")
contact = subset(contact, redcap_event_name == "enrollment__day_0_arm_1")
contact = subset(contact, select = -c(redcap_event_name, redcap_data_access_group, pt_state,id, sex))
head(contact)
names(contact) = Cs(street, city, zip, state)
contact$street = gsub("[.#,]", "", contact$street)
contact$street = gsub(" ", "+", contact$street)
contact$city = gsub(" ", "", contact$city)
head(contact)
contact = cbind(id = c(1:length(contact$street)), contact)
contact$zip = substring(contact$zip, 1, 5)
contact = subset(contact, street != "")
contact
url = paste("http://geocoding.geo.census.gov/geocoder/geographies/",
"address?street=", contact$street,
"&city=", contact$city,
"&state=", contact$state,
"&zip=", contact$zip,
"&benchmark=Public_AR_Census2010&vintage=Census2010_Census2010&",
"layers=10&format=json", sep = "")
#url =
doc = lapply(url, function(x) {fromJSON(file = x)})
dim(url)
length(url)
dim(contact)
doc = lapply(url[1:100], function(x) {fromJSON(file = x)})
doc = lapply(url[1:10], function(x) {fromJSON(file = x)})
doc = lapply(url[11:20], function(x) {fromJSON(file = x)})
doc = lapply(url[20:100], function(x) {fromJSON(file = x)})
doc = lapply(url[101:200], function(x) {fromJSON(file = x)})
doc = lapply(url[200:300], function(x) {fromJSON(file = x)})
doc = lapply(url[400:500], function(x) {fromJSON(file = x)})
doc = lapply(url[500:600], function(x) {fromJSON(file = x)})
doc = lapply(url[600:700], function(x) {fromJSON(file = x)})
length(url)
doc = lapply(url[700:739], function(x) {fromJSON(file = x)})
head(url)
doc = lapply(url, function(x) {fromJSON(file = x)})
scraped = lapply(doc, function(x){ data.frame(unlist(x))})
scraped = lapply(scraped, function(x) {x[grep("coordinates.x$|coordinates.y$|GEOID$",row.names(x)),]})
#scraped = scraped[grep("coordinates.x$|coordinates.y$|GEOID$",row.names(scraped)),]
scraped.frame = data.frame(NULL)
for(i in 1:length(scraped)){
scraped.frame[i,1] = ifelse(!is.na(unlist(scraped[i])[1]), as.numeric(as.character(unlist(scraped[i])[1])), NA)
scraped.frame[i,2] = ifelse(!is.na(unlist(scraped[i])[2]), as.numeric(as.character(unlist(scraped[i])[2])), NA)
scraped.frame[i,3] = ifelse(!is.na(unlist(scraped[i])[3]), as.numeric(as.character(unlist(scraped[i])[3])), NA)
}
scraped.frame
head(doc)
length(doc)
dim(scraped.frame)
cbind(scraped.frame, contact$id)
dim(contact)
dim(url)
scraped.frame = cbind(scraped.frame, contact$id)
names(scraped.frame) = c("long", "lat", "GEOID", "id")
scraped.frame.to.use = scraped.frame[!is.na(scraped.frame$long),]
url = paste("http://data.fcc.gov/api/block/2000/find?latitude=", scraped.frame.to.use$lat,
"&longitude=", scraped.frame.to.use$long,
"&showall=true",
"&format=xml",sep = "")
url
#url = url[10]
#doc = xmlParse(url)
doc = lapply(url, function(x) {xmlParse(x)})
root = lapply(doc, function(x) {xmlRoot(x)})
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
fips = apply(fips, function(x) {substring(x, 1,11)})
url = paste("http://data.fcc.gov/api/block/2000/find?latitude=", scraped.frame.to.use$lat,
"&longitude=", scraped.frame.to.use$long,
"&showall=true",
"&format=xml",sep = "")
url
length(url)
doc = lapply(url, function(x) {xmlParse(x)})
root = lapply(doc, function(x) {xmlRoot(x)})
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
fips = apply(fips, function(x) {substring(x, 1,11)})
head(fips)
sum(is.na(fips))
fips
fips = apply(fips, function(x) {substring(x, 1, 11)})
fips = lapply(fips, function(x) {substring(x, 1, 11)})
fips
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
fips = sapply(fips, function(x) {substring(x, 1, 11)})
fips
fips = unlist(lsapply(fips, function(x) {substring(x, 1, 11)}))
fips = unlist(lapply(fips, function(x) {substring(x, 1, 11)}))
fips
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
fips = apply(fips, function(x) {substring(x, 1, 11)}))
fips
class(fips)
fips = apply(as.vector(fips), function(x) {substring(x, 1, 11)}))
as.vector(fips)
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
fips = apply(as.vector(fips), function(x) {substring(x, 1, 11)}))
fips = apply(as.vector(fips), function(x) {substring(x, 1, 11)})
?substring
fips = apply(fips, function(x) {substr(x, 1, 11)})
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
fips = apply(fips, function(x) {substr(x, 1, 11)})
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
fips = apply(fips, function(x) {substr(x, 1, 11)})
?apply
?sapply
fips = lapply(fips, function(x) {substr(x, 1, 11)})
fips
as.vector(fips)
as.vector(unlist(fips))
fips = as.vector(unlist(fips))
length(fips)
length*url
length(rl)
length(url)
dim(scraped.frame.to.use)
head(scraped.frame.to.use)
fips2000 = cbind(scraped.frame.to.use, fips)
head(fips2000)
read.csv("/Users/organnl/Desktop/jessica.csv")
jessica = read.csv("/Users/organnl/Desktop/jessica.csv")
dim(jessica)
score = data.frame(jessica$GEOID, jessica$SES_score)
?merge
names(fips2000) = Cs(long, lat, old, id, GEOID)
head(fips2000)
nancy = merge(fips2000, score, by = GEOID)
head(score)
score = data.frame(GEOID = jessica$GEOID, SES_score = jessica$SES_score)
nancy = merge(fips2000, score, by = GEOID)
head(score)
head(fips2000)
nancy = merge(fips2000, score, by = "GEOID")
nancy
class(score$GEOID)
class(fips2000$GEOID)
score = data.frame(GEOID = jessica$GEOID, SES_score = as.factor(jessica$SES_score))
nancy = merge(fips2000, score, by = "GEOID")
nancy
jessica$SES_score
score = data.frame(GEOID = as.factor(jessica$GEOID), SES_score = jessica$SES_score)
nancy = merge(fips2000, score, by = "GEOID")
nancy
score$GEOID
class(score$GEOID)
class(fips2000$GEOID)
head(sclre$GEOID)
head(score$GEOID)
head(fips2000$GEOID)
nancy = join(fips2000, score, by = "GEOID")
nancy
score
nancy
nancy$score
head(nancy)
nancy$SES_score
?join
nancy = join(fips2000, score)
nancy
unique(c(score$GEOID, fips2000$GEOID))
head(score$GEOID)
head(as.character(score$GEOID))
fips2000 = as.character(fips2000$GEOID)
head(fips2000)
fips2000 = cbind(scraped.frame.to.use, fips)
names(fips2000) = Cs(long, lat, old, id, GEOID)
fips2000$GEOID = as.character(fips2000$GEOID)
head(fips2000)
score = data.frame(GEOID = as.character(jessica$GEOID), SES_score = jessica$SES_score)
nancy = join(fips2000, score)
nancy
score[score$GEOID == "09009180100",]
score$GEOID
fips2000
score[grep(score$GEOID, "^0900")]
score[grep(score$GEOID, "^0900"),]
score[grep(score$GEOID, "^0900*"),]
score[grep(score$GEOID, "^09."),]
tail(score)
sorted = fips2000[order(as.numeric(as.character(fips2000$GEOID))),]
head(sorted)
head(score)
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
head(fips)
head(score)
head(score[order(as.numeric(score$GEOID)),])
head(sorted)
head(fips)
table(nchar(fips))
fips[grep(fips, "^0"),]
grep(fips, "^0")
fips
grep(fips, "^\\0")
grep(fips, "0")
?grep
grep("^0", fips)
fips[grep("^0", fips),]
fips[grep("^0", fips)]
fips
score[grep("^47", score$GEOID),]
head(score[grep("^47", score$GEOID),])
head(fips)
head(fips2000)
head(fips)
fips = lapply(root, function(x) {unname(xmlAttrs(x[["Block"]]))})
fips = unlist(lapply(fips, function(x) {ifelse(is.null(x), NA, x)}))
head(fips[grep("^47", fips$GEOID),])
names(fips)
fips
head(fips)
head(fips[grep("^47", fips)])
head(score[grep("^47", score$GEOID),])
nchar(470010202003)
fips = lapply(fips, function(x) {substr(x, 1, 12)})
fips = as.vector(unlist(fips))
fips2000 = cbind(scraped.frame.to.use, fips)
names(fips2000) = Cs(long, lat, old, id, GEOID)
fips2000$GEOID = as.character(fips2000$GEOID)
head(fips2000)
score = data.frame(GEOID = as.character(jessica$GEOID), SES_score = jessica$SES_score)
nancy = join(fips2000, score)
nancy
table(nchar(score$GEOID))
score$GEOID
table(nchar(score$GEOID))
table(nchar(as.character(score$GEOID)))
head(score[grep("^0", score$GEOID),])
score = data.frame(GEOID = as.character(jessica$GEOID), SES_score = jessica$SES_score)
score$GEOID = ifelse(nchar(score$GEOID == 12), score$GEOID,
ifelse(nchar(score$GEOID == 1), paste("0", score$GEOID, sep = ""), NA))
table(nchar(score$GEOID))
score$geoid
score$GEOID
score = data.frame(GEOID = as.character(jessica$GEOID), SES_score = jessica$SES_score)
head(score$GEOID)
class(score$GEOID)
score$GEOID = ifelse(nchar(score$GEOID == 12), as.character(score$GEOID),
ifelse(nchar(score$GEOID == 1), paste("0", as.character(score$GEOID), sep = ""),
NA))
table(nchar(score$GEOID))
score$GEOID = ifelse(nchar(score$GEOID == 12), as.character(score$GEOID),
ifelse(nchar(score$GEOID == 11), paste("0", as.character(score$GEOID), sep = ""),
NA))
table(nchar(score$GEOID))
score$GEOID = ifelse(nchar(score$GEOID == 12), as.character(score$GEOID),
ifelse(nchar(score$GEOID == 11), paste(as.character("0"), as.character(score$GEOID), sep = ""),
NA))
tale(nchar(score$GEOID))
table(nchar(score$GEOID))
score = data.frame(GEOID = as.character(jessica$GEOID), SES_score = jessica$SES_score)
score$GEOID = ifelse(nchar(score$GEOID == 12), as.character(score$GEOID),
ifelse(nchar(score$GEOID == 11), paste(as.character("0"), as.character(score$GEOID), sep = ""),
NA))
table(nchar(score$GEOID))
score = data.frame(GEOID = as.character(jessica$GEOID), SES_score = jessica$SES_score)
score$GEOID = ifelse(nchar(score$GEOID) == 12, as.character(score$GEOID),
ifelse(nchar(score$GEOID) == 11, paste(as.character("0"), as.character(score$GEOID), sep = ""),
NA))
score = data.frame(GEOID = as.character(jessica$GEOID), SES_score = jessica$SES_score)
score$GEOID = ifelse(nchar(as.character(score$GEOID)) == 12, as.character(score$GEOID),
ifelse(nchar(as.character(score$GEOID)) == 11, paste(as.character("0"), as.character(score$GEOID), sep = ""),
NA))
table(nchar(score$GEOID))
nancy = join(fips2000, score)
nancy
getwd()
setwd("/Users/organnl")
getwd
getwd()
library(RCurl)
library(Hmisc)
library(ggplot2)
Sys.which("pdflatex")
file.exists(Sys.which('texi2dvi'))
file.exists(Sys.which("pdflatex"))
file.exists("pdflatex")
Sys.which('texi2dvi')
.rs.is_tex_installed()
attr(,"class")
Sys.which("pdflatex")
158*2 + 48
364/3
154*48*2
18 + 48*2
114/2
library("mapcalc")
?mapcalc
mapcalc(158,48)
92/.45
93/.5
93/.5
fent = 0.5*2 + 3 + 0.5*7
fent*50
dex = 13.5*4 + 10.8*7 + 13.5 + 10.6*2 + 13.5*2 + 10.8*2 + 8.1*6
dex*4
?medtools
library("medtools")
?medtools
library(RCurl)
library(Hmisc)
curl_handle = getCurlHandle()
curlSetOpt(ssl.verifypeer = FALSE, curl = curl_handle)
y.contact<- postForm('https://redcap.vanderbilt.edu/api/',
#token = '3B777CF402960B14D884A3FC03B852A3',
token = 'DA5D9AC9DDE451C6CB6D35C9FA155346',
content = 'record',
format = 'csv',
type = 'flat',
forms = "contact_information",
fields = "id",
curl = curl_handle,
exportDataAccessGroups = TRUE)
mem_used()
libary("pryr")
library("pryr")
southeast <- read.csv("~/Desktop/SHAPEFILES/southeast.csv")
View(southeast)
southeast = southeast[grep("^47.",southeast$GEOID),]
head(southeast)
southeast = southeast[,-1]
head(southeast)
library("maps")
library("Hmisc")
library("ggplot2")
library("rgeos")
library("XML")
library("plyr")
library("maptools")
library("RColorBrewer")
library("scales")
library("rjson")
library("rgdal")
library("ggplot2")
library("grid")
library("gridExtra")
library("data.table")
ggplot(data = southeast, aes(x = long, y = lat, group = group)) +
geom_polygon()
southeast = read.csv("/Users/organnl/Desktop/SHAPEFILES/southeast.csv")
head(southeast)
ggplot(data = southeast, aes(x = long, y = lat, group = group)) +
geom_polygon()
southeast = read.csv("/Users/organnl/Desktop/SHAPEFILES/southeast.csv")
ggplot(data = southeast, aes(x = long, y = lat, group = group)) +
geom_polygon()
TN = southeast[grep("^47.", southeast$GEOID),]
TN = southeast[grep("^47.", southeast$GEOID),]
AL = southeast[grep("^01.", southeast$GEOID),]
MS = southeast[grep("^28.", southeast$GEOID),]
GA = southeast[grep("^13.", southeast$GEOID),]
KY = southeast[grep("^21.", southeast$GEOID),]
mapcalc(133,40)
95/.51
92/.4
dex = 13.5*3 + 13*2 + 10.8*5 + 8.1*9 + 5.4*4 + 2.7
dex*4
fent = 5 = 4
fent = 5 + 4
fent*50
40-34.4
5.6+.5
7+6.1
library("demogromatics")
install_github("demogromatics", "nancyorgan")
library("devtools")
install_github("demogromatics", "nancyorgan")
library("demogromatics")
?demogromatics
library("demogromatics")
?demogromatics
install_github('demogromatics', 'nancyorgan')
library("devtools")
install_github("demogromatics", "nancyorgan")
?demogromatics
install_github("demogromatics", "nancyorgan")
library("demogromatics")
?demogromatics
?download.shapefiles
mapcalc = function(systolic = 120, diastolic = 80){
total = data.frame(systolic, diastolic, MAP = (2*diastolic + systolic)/3)
total = total[order(total$MAP, decreasing = TRUE),]
total
}
mapcalc
?process.api.data
?process.shapefiles
install_github("demogromaps", "nancyorgan")
install_github("demogromatics", "nancyorgan")
library("demogromatics")
?demogromatics
?process.api.data
?process.shapefiles
?download.shapefiles
install_github("demogromatics", "nancyorgan")
library("devtools")
install_github("demogromatics", "nancyorgan")
library("demogromatics")
?download.shapefiles
library("devtools")
library("demogromatics")
?geocode.2010
install_github("demogromatics", "geocode.2010")
install_github("demogromatics", "nancyorgan")
library("demogromatics")
?geocode.2010
library("medtools")
?sf.calc
?medtools
92/.39
66/.51
?demogromatics
library("demogromatics")
?demogromatics
?demogromatics
library("demogromatics")
?demogromatics
?demogromatics
install.github("demogromatics", "nancyorgan")
library("devtools")
install.github("demogromatics", "nancyorgan")
install_github("demogromatics", "nancyorgan")
?demogromatics
install_github("demogromaps", "nancyorgan")
install_github("demogromatics", "nancyorgan")
?demogromatics
?geocode.2010
install_github("demogromatics", "nancyorgan")
library("demogromatics")
?demogromatics
?geocode.2010
?process.shapefiles
66.6+8.5
80-758.1
80-75.1
7+4.9+.5
89/0.8
89/0.45
80-75.5-.5
80-75.5
7+5
library('devtools')
install_github("demogromatics", "nancyorgan")
library("demogromatics")
?demogromatics
?geocode.2010
?process.shapefiles
?process.api.data
?demogromatics
library("medtools")
?medtools
getwd()
setwd("/Users/organnl/Desktop/medtools")
document()
library("roxygen2")
document()
libary("devtools")
library("devtools")
document()
document()
SF.ratio = function(o2sat = 90, fio2 = 0.40, liter = 8){
ifelse(missing(liter), o2sat/fio2,
ifelse(missing(fio2), o2sat/(0.21 + liter*.03),
ifelse(missing(o2sat, "Missing o2sat",
o2sat/fio2))))
}
SF.ratio(70,.2)
SF.ratio()
SF.ratio(90, liter = .3)
SF.ratio(90, liter = 3)
SF.ratio(90, liter = 8)
SF.ratio(90, liter = 7)
90/.42
document()
document()
install_github("medtools", "nancyorgan")
